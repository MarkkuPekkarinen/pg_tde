{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"<code>pg_tde</code> documentation","text":"<p><code>pg_tde</code> is the open source PostgreSQL extension that provides Transparent Data Encryption (TDE) to protect data at rest. This ensures that the data stored on disk is encrypted, and no one can read it without the proper encryption keys, even if they gain access to the physical storage media. </p> <p>You can configure encryption differently for each database, encrypting specific tables in some databases with different encryption keys while keeping others unencrypted.</p> <p>Lear more what is Transparent Data Encryption and why you need it.</p> <p>Important</p> <p>This extension is in the experimental phase and is under active development. It is not meant for production use yet. </p> <p>What\u2019s new </p>"},{"location":"index.html#whats-encrypted","title":"What\u2019s encrypted:","text":"<p><code>pg_tde</code> encrypts the following:</p> <ul> <li>User data in tables, including TOAST tables, that are created using the extension. Metadata of those tables is not encrypted. </li> <li>Temporary tables created during the database operation for data tables created using the extension</li> <li>Write-Ahead Log (WAL) data for the entire database cluster. This includes WAL data in encrypted and non-encrypted tables</li> <li>Indexes on encrypted tables </li> <li>Logical replication on encrypted tables</li> </ul>"},{"location":"index.html#known-limitations","title":"Known limitations","text":"<ul> <li>Keys in the local keyfile are stored unencrypted. For better security we recommend using the Key management storage. </li> <li>System tables are currently not encrypted.</li> </ul> <p> Warning: Note that introducing encryption/decryption affects performance. Our benchmark tests show less than 10% performance overhead for most situations. However, in some specific applications such as those using JSONB operations, performance degradation might be higher.</p>"},{"location":"index.html#versions-and-supported-postgresql-deployments","title":"Versions and supported PostgreSQL deployments","text":"<p>The <code>pg_tde</code> extension comes in two distinct versions with specific access methods to encrypt the data. These versions are database-specific and differ in terms of what they encrypt and with what access method. Each version is characterized by the database it supports, the access method it provides, and the scope of encryption it offers.</p> <ul> <li> <p>Version for Percona Server for PostgreSQL</p> <p>This <code>pg_tde</code> version is based on and supported for Percona Server for PostgreSQL 17.x  - an open source binary drop-in replacement for PostgreSQL Community. It provides the <code>tde_heap</code> access method and offers full encryption capabilities. </p> </li> <li> <p>Community version</p> <p>This version is supported for PostgreSQL Community 16 and 17, and Percona Distribution for PostgreSQL 16. It provides the <code>tde_heap_basic</code> access method, offering limited encryption features. The limitations are in encrypting WAL data only for tables created using the extension and no support of index encryption nor logical replication.</p> </li> </ul>"},{"location":"index.html#which-version-to-chose","title":"Which version to chose?","text":"<p>The answer is pretty straightforward: for data sets where indexing is not mandatory or index encryption is not required, use the community version and the <code>tde_heap_basic</code> access method. Check the upstream documentation  how to get started.</p> <p>Otherwise, enjoy full encryption with the Percona Server for PostgreSQL version and the <code>tde_heap</code> access method. </p> <p>Still not sure? Contact our experts to find the best solution for you.</p> <p>Get started</p>"},{"location":"index.html#future-releases","title":"Future releases","text":"<p>The following is planned for future releases of <code>pg_tde</code>:</p> <ul> <li>KMIP integration for key management</li> <li>Global principal key management</li> </ul> <p></p>"},{"location":"index.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"apt.html","title":"Install <code>pg_tde</code> on Debian or Ubuntu","text":"<p>The packages for the tech preview <code>pg_tde</code> are available in the experimental repository for Percona Distribution for PostgreSQL 17. </p> <p>Check the list of supported platforms.</p> <p>This tutorial shows how to install <code>pg_tde</code> with Percona Distribution for PostgreSQL.</p>"},{"location":"apt.html#preconditions","title":"Preconditions","text":"<p>You need the <code>percona-release</code> repository management tool that enables the desired Percona repository for you.</p> <ol> <li> <p>You need the following dependencies to install <code>percona-release</code>:</p> <ul> <li><code>wget</code></li> <li><code>gnupg2</code></li> <li><code>curl</code></li> <li><code>lsb-release</code></li> </ul> <p>Install them with the following command:</p> <pre><code>sudo apt-get install -y wget gnupg2 curl lsb-release\n</code></pre> </li> <li> <p>Fetch the <code>percona-release</code> package</p> <pre><code>sudo wget https://repo.percona.com/apt/percona-release_latest.generic_all.deb\n</code></pre> </li> <li> <p>Install <code>percona-release</code></p> <pre><code>sudo dpkg -i percona-release_latest.generic_all.deb\n</code></pre> </li> <li> <p>Enable the Percona Distribution for PostgreSQL repository</p> <p>Percona provides two repositories for Percona Distribution for PostgreSQL. We recommend enabling the Major release repository to timely receive the latest updates. Since the <code>tde_heap</code> access method is still in the experimental stage, the <code>pg_tde</code> package is currently available from the experimental repository.</p> <pre><code>$ sudo percona-release enable ppg-17.0 experimental\n</code></pre> </li> <li> <p>Update the local cache</p> <pre><code>sudo apt-get update\n</code></pre> </li> </ol>"},{"location":"apt.html#install-pg_tde","title":"Install <code>pg_tde</code>","text":"<p>After all preconditions are met, install the extension.</p> <ol> <li> <p>Install Percona Distribution for PostgreSQL. </p> <p>Run the following command to install Percona Distribution for PostgreSQL and the required packages:</p> <pre><code>sudo apt-get install -y percona-postgresql-17 percona-postgresql-contrib percona-postgresql-server-dev-all\n</code></pre> </li> <li> <p>Install <code>pg_tde</code> packages</p> <pre><code>sudo apt-get install percona-postgresql-17-pg-tde\n</code></pre> </li> </ol>"},{"location":"apt.html#next-step","title":"Next step","text":"<p>Setup</p> <p></p>"},{"location":"apt.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"contribute.html","title":"Contributing guide","text":"<p>Welcome to <code>pg_tde</code> - the Transparent Data Encryption extension for PostgreSQL!</p> <p>We\u2019re glad that you would like to become a community member and contribute to this project.</p> <p>You can contribute in one of the following ways:</p> <ol> <li>Reach us on our Forums.</li> <li>Submit a bug report or a feature request</li> <li>Submit a pull request (PR) with the code patch</li> <li>Contribute to documentation</li> </ol>"},{"location":"contribute.html#prerequisites","title":"Prerequisites","text":"<p>Before submitting code contributions, we ask you to complete the following prerequisites.</p>"},{"location":"contribute.html#1-sign-the-cla","title":"1. Sign the CLA","text":"<p>Before you can contribute, we kindly ask you to sign our Contributor License Agreement (CLA). You can do this in on click using your GitHub account.</p> <p>Note:  You can sign it later, when submitting your first pull request. The CLA assistant validates the PR and asks you to sign the CLA to proceed.</p>"},{"location":"contribute.html#2-code-of-conduct","title":"2. Code of Conduct","text":"<p>Please make sure to read and agree to our Code of Conduct.</p>"},{"location":"contribute.html#submitting-a-pull-request","title":"Submitting a pull request","text":"<p>All bug reports, enhancements and feature requests are tracked in GitHub issues. Though not mandatory, we encourage you to first check for a bug report among the issues and in the PR list: perhaps the bug has already been addressed. </p> <p>For feature requests and enhancements, we do ask you to create a GitHub issue, describe your idea and discuss the design with us. This way we align your ideas with our vision for the product development.</p> <p>If the bug hasn\u2019t been reported / addressed, or we\u2019ve agreed on the enhancement implementation with you, do the following:</p> <ol> <li>Fork this repository</li> <li>Clone this repository on your machine. </li> <li>Create a separate branch for your changes. If you work on a GitHub issue, please create a branch from it. This makes it easier to track your contribution.</li> <li> <p>Make your changes. Please follow the following guidelines to improve code readability:</p> <ul> <li>PostgreSQL coding conventions</li> <li>C style and Coding rules </li> </ul> </li> <li> <p>Build <code>pg_tde</code> and test your changes locally. </p> </li> <li>Commit the changes. The commit message guidelines will help you with writing great commit messages</li> <li>Open a pull request to Percona.</li> <li>Our team will review your code and if everything is correct, will merge it.  Otherwise, we will contact you for additional information or with the request to make changes.</li> </ol>"},{"location":"contribute.html#run-local-tests","title":"Run local tests","text":"<p>When you work, you should periodically run tests to check that your changes don\u2019t break existing code.</p> <p>To run the tests, use the following command:</p> <pre><code>cd pg_tde\nmake USE_PGXS=1 installcheck\n</code></pre> <p>You can run tests on your local machine with whatever operating system you have. After you submit the pull request, we will check your patch on multiple operating systems.</p>"},{"location":"contribute.html#contribute-to-documentation","title":"Contribute to documentation","text":"<p><code>pg_tde</code> documentation is written in Markdown language, so you can  edit it online via GitHub. If you wish to have more control over the doc process, jump to how to edit documentation locally. </p> <p>Before you start, learn what git, MkDocs and Docker are and what Markdown is and how to write it. For your convenience, there\u2019s also a cheat sheet to help you with the syntax. </p> <p>The doc files are in the <code>docs</code> directory.</p>"},{"location":"contribute.html#edit-documentation-online-via-github","title":"Edit documentation online via GitHub","text":"<ol> <li>Click the Edit this page icon next to the page title. The source <code>.md</code> file of the page opens in GitHub editor in your browser. If you haven\u2019t worked with the repository before, GitHub creates a fork of it for you.</li> <li>Edit the page. You can check your changes on the Preview tab. </li> <li>Commit your changes.<ul> <li>In the Commit changes section, describe your changes.</li> <li>Select the Create a new branch for this commit and start a pull request option</li> <li>Click Propose changes.</li> </ul> </li> <li>GitHub creates a branch and a commit for your changes. It loads a new page on which you can open a pull request to Percona. The page shows the base branch - the one you offer your changes for, your commit message and a diff - a visual representation of your changes against the original page. This allows you to make a last-minute review. When you are ready, click the Create pull request button.</li> <li>Someone from our team reviews the pull request and if everything is correct, merges it into the documentation. Then it gets published on the site.</li> </ol>"},{"location":"contribute.html#edit-documentation-locally","title":"Edit documentation locally","text":"<p>This option is for users who prefer to work from their computer and / or have the full control over the documentation process.</p> <p>The steps are the following:</p> <ol> <li>Fork this repository</li> <li>Clone the repository on your machine:</li> </ol> <pre><code>git clone git@github.com:&lt;your-name&gt;/pg_tde.git\n\n3. Change the directory to ``pg_tde`` and add the remote upstream repository:\n\n```sh\ngit remote add upstream git@github.com:percona/pg_tde.git\n</code></pre> <ol> <li>Pull the latest changes from upstream</li> </ol> <pre><code>git fetch upstream\ngit merge upstream/main\n</code></pre> <ol> <li>Create a separate branch for your changes</li> </ol> <pre><code>git checkout -b &lt;my_branch&gt;\n</code></pre> <ol> <li>Make changes</li> <li> <p>Commit your changes. The commit message guidelines will help you with writing great commit messages</p> </li> <li> <p>Open a pull request to Percona</p> </li> </ol>"},{"location":"contribute.html#building-the-documentation","title":"Building the documentation","text":"<p>To verify how your changes look, generate the static site with the documentation. This process is called building. You can do it in these ways: - Use Docker - Install MkDocs and build locally</p>"},{"location":"contribute.html#use-docker","title":"Use Docker","text":"<ol> <li>Get Docker</li> <li>We use our Docker image to build documentation. Run the following command:</li> </ol> <p><pre><code>cd documentation\ndocker run --rm -v $(pwd):/docs perconalab/pmm-doc-md mkdocs build\n</code></pre>    If Docker can\u2019t find the image locally, it first downloads the image, and then runs it to build the documentation.</p> <ol> <li>Go to the <code>site</code> directory and open the <code>index.html</code> file to see the documentation.</li> </ol> <p>If you want to see the changes as you edit the docs, use this command instead:</p> <pre><code>cd documentation\ndocker run --rm -v $(pwd):/docs -p 8000:8000 perconalab/pmm-doc-md mkdocs serve --dev-addr=0.0.0.0:8000\n</code></pre> <p>Wait until you see <code>INFO    -  Start detecting changes</code>, then enter <code>0.0.0.0:8000</code> in the browser\u2019s address bar. The documentation automatically reloads after you save the changes in source files.</p>"},{"location":"contribute.html#install-mkdocs-and-build-locally","title":"Install MkDocs and build locally","text":"<ol> <li> <p>Install Python.</p> </li> <li> <p>Install MkDocs and required extensions:</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> <li> <p>Build the site:</p> <pre><code>cd documentation\nmkdocs build\n</code></pre> </li> <li> <p>Open <code>site/index.html</code></p> </li> </ol> <p>Or, to run the built-in web server:</p> <pre><code>cd documentation\nmkdocs serve\n</code></pre> <p>View the site at http://0.0.0.0:8000</p>"},{"location":"contribute.html#build-pdf-file","title":"Build PDF file","text":"<p>To build a PDF version of the documentation, do the following:</p> <ol> <li> <p>Disable displaying the last modification of the page:</p> <pre><code>export ENABLED_GIT_REVISION_DATE=false\n</code></pre> </li> <li> <p>Build the PDF file:</p> <pre><code>ENABLE_PDF_EXPORT=1 mkdocs build -f mkdocs-pdf.yml\n</code></pre> <p>The PDF document is in the <code>site/pdf</code> folder.</p> </li> </ol> <p></p>"},{"location":"contribute.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"decrypt.html","title":"Decrypt an encrypted table","text":""},{"location":"decrypt.html#method-1-change-the-access-method","title":"Method 1. Change the access method","text":"<p>If you encrypted a table with the <code>tde_heap</code> or <code>tde_heap_basic</code> access method and need to decrypt it, run the following command against the desired table (<code>mytable</code> in the example below):</p> <pre><code>ALTER TABLE mytable SET access method heap;\n</code></pre> <p>Check that the table is not encrypted:</p> <pre><code>SELECT pg_tde_is_encrypted('mytable');\n</code></pre> <p>The output returns <code>f</code> meaning that the table is no longer encrypted. </p> <p>In the same way you can re-encrypt the data with the <code>tde_heap_basic</code> access method. </p> <pre><code>ALTER TABLE mytable SET access method tde_heap_basic;\n</code></pre> <p>Note that the indexes and WAL files will no longer be encrypted.</p>"},{"location":"decrypt.html#method-2-create-a-new-unencrypted-table-on-the-base-of-the-encrypted-one","title":"Method 2. Create a new unencrypted table on the base of the encrypted one","text":"<p>Alternatively, you can create a new unencrypted table with the same structure and data as the initial table. For example, the original encrypted table is <code>EncryptedCustomers</code>. Use the following command to create a new table <code>Customers</code>: </p> <pre><code>CREATE TABLE Customers AS\nSELECT * FROM EncryptedCustomers;\n</code></pre> <p>The new table <code>Customers</code> inherits the structure and the data from <code>EncryptedCustomers</code>.</p> <p>(Optional) If you no longer need the <code>EncryptedCustomers</code> table, you can delete it.</p> <pre><code>DROP TABLE EncryptedCustomers;\n</code></pre> <p></p>"},{"location":"decrypt.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"external-parameters.html","title":"Use external reference to parameters","text":"<p>To allow storing secrets or any other parameters in a more secure, external location, <code>pg_tde</code> allows users to specify an external reference instead of hardcoded parameters.</p> <p>In Alpha1 version, <code>pg_tde</code> supports the following external storage methods:</p> <ul> <li><code>file</code>, which just stores the data in a simple file specified by a <code>path</code>. The file should be readable to the postgres process.</li> <li><code>remote</code>, which uses a HTTP request to retrieve the parameter from the specified <code>url</code>.</li> </ul>"},{"location":"external-parameters.html#examples","title":"Examples","text":"<p>To use the file provider with a file location specified by the <code>remote</code> method, use the following command:</p> <pre><code>SELECT pg_tde_add_key_provider_file(\n    'file-provider', \n    json_object( 'type' VALUE 'remote', 'url' VALUE 'http://localhost:8888/hello' )\n    );\"\n</code></pre> <p>Or to use the <code>file</code> method, use the following command:</p> <pre><code>SELECT pg_tde_add_key_provider_file(\n    'file-provider', \n    json_object( 'type' VALUE 'remote', 'path' VALUE '/tmp/datafile-location' )\n    );\"\n</code></pre> <p>Any parameter specified to the <code>add_key_provider</code> function can be a <code>json_object</code> instead of the string,  similar to the above examples.</p> <p></p>"},{"location":"external-parameters.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"faq.html","title":"FAQ","text":""},{"location":"faq.html#why-do-i-need-tde","title":"Why do I need TDE?","text":"<ul> <li>Compliance to security and legal regulations like GDPR, PCI DSS and others</li> <li>Encryption of backups</li> <li>Granular encryption of specific data sets and reducing the performance overhead that encryption brings</li> <li>Additional layer of security to existing security measures</li> </ul>"},{"location":"faq.html#i-use-disk-level-encryption-why-should-i-care-about-tde","title":"I use disk-level encryption. Why should I care about TDE?","text":"<p>Encrypting a hard drive encrypts all data including system and application files that are there. However, disk encryption doesn\u2019t protect your data after the boot-up of your system. During runtime, the files are decrypted with disk-encryption.</p> <p>TDE focuses specifically on data files and offers a more granular control over encrypted data. It also ensures that files are encrypted on disk during runtime and when moved to another system or storage.</p> <p>Consider using TDE and storage-level encryption together to add another layer of data security</p>"},{"location":"faq.html#is-tde-enough-to-ensure-data-security","title":"Is TDE enough to ensure data security?","text":"<p>No. TDE is an additional layer to ensure data security. It protects data at rest. Consider introducing also these measures:</p> <ul> <li>Access control and authentication</li> <li>Strong network security like TLS</li> <li>Disk encryption</li> <li>Regular monitoring and auditing</li> <li>Additional data protection for sensitive fields (e.g., application-layer encryption)</li> </ul>"},{"location":"faq.html#what-happens-to-my-data-if-i-lose-a-principal-key","title":"What happens to my data if I lose a principal key?","text":"<p>If you lose encryption keys, especially, the principal key, the data is lost. That\u2019s why it\u2019s critical to back up your encryption keys securely.</p> <p></p>"},{"location":"faq.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"functions.html","title":"Functions","text":"<p>The <code>pg_tde</code> extension provides the following functions:</p>"},{"location":"functions.html#pg_tde_add_key_provider_file","title":"pg_tde_add_key_provider_file","text":"<p>Creates a new key provider for the database using a local file.</p> <p>This function is intended for development, and stores the keys unencrypted in the specified data file.</p> <pre><code>SELECT pg_tde_add_key_provider_file('provider-name','/path/to/the/keyring/data.file');\n</code></pre> <p>All parameters can be either strings, or JSON objects referencing remote parameters.</p>"},{"location":"functions.html#pg_tde_add_key_provider_vault_v2","title":"pg_tde_add_key_provider_vault_v2","text":"<p>Creates a new key provider for the database using a remote HashiCorp Vault server.</p> <p>The specified access parameters require permission to read and write keys at the location.</p> <pre><code>SELECT pg_tde_add_key_provider_vault_v2('provider-name','secret_token','url','mount','ca_path');\n</code></pre> <p>where:</p> <ul> <li><code>url</code> is the URL of the Vault server</li> <li><code>mount</code> is the mount point where the keyring should store the keys</li> <li><code>secret_token</code> is an access token with read and write access to the above mount point</li> <li>[optional] <code>ca_path</code> is the path of the CA file used for SSL verification</li> </ul> <p>All parameters can be either strings, or JSON objects referencing remote parameters.</p>"},{"location":"functions.html#pg_tde_add_key_provider_kmip","title":"pg_tde_add_key_provider_kmip","text":"<p>Creates a new key provider for the database using a remote KMIP server.</p> <p>The specified access parameters require permission to read and write keys at the server.</p> <pre><code>SELECT pg_tde_add_key_provider_kmip('provider-name','kmip-IP', 5696, '/path_to/server_certificate.pem', '/path_to/client_key.pem');\n</code></pre> <p>where:</p> <ul> <li><code>provider-name</code> is the name of the provider. You can specify any name, it\u2019s for you to identify the provider.</li> <li><code>kmip-IP</code> is the IP address of a domain name of the KMIP server</li> <li>The port to communicate with the KMIP server. The default port is <code>5696</code>.</li> <li><code>server-certificate</code> is the path to the certificate file for the KMIP server.</li> <li><code>client key</code> is the path to the client key.</li> </ul>"},{"location":"functions.html#pg_tde_set_principal_key","title":"pg_tde_set_principal_key","text":"<p>Sets the principal key for the database using the specified key provider.</p> <p>The principal key name is also used for constructing the name in the provider, for example on the remote Vault server.</p> <p>You can use this function only to a principal key. For changes in the principal key, use the <code>pg_tde_rotate_principal_key</code> function.</p> <pre><code>SELECT pg_tde_set_principal_key('name-of-the-principal-key', 'provider-name');\n</code></pre>"},{"location":"functions.html#pg_tde_rotate_principal_key","title":"pg_tde_rotate_principal_key","text":"<p>Creates a new version of the specified principal key and updates the database so that it uses the new principal key version.</p> <p>When used without any parameters, the function will just create a new version of the current database principal key, using the same provider:</p> <pre><code>SELECT pg_tde_rotate_principal_key();\n</code></pre> <p>Alternatively, you can pass two parameters to the function, specifying both a new key name and a new provider name:</p> <pre><code>SELECT pg_tde_rotate_principal_key('name-of-the-new-principal-key', 'name-of-the-new-provider');\n</code></pre> <p>Both parameters support the <code>NULL</code> value, which means that the parameter won\u2019t be changed:</p> <pre><code>-- creates  new principal key on the same provider as before\nSELECT pg_tde_rotate_principal_key('name-of-the-new-principal-key', NULL);\n\n-- copies the current principal key to a new provider\nSELECT pg_tde_rotate_principal_key(NULL, 'name-of-the-new-provider');\n</code></pre>"},{"location":"functions.html#pg_tde_is_encrypted","title":"pg_tde_is_encrypted","text":"<p>Tells if a table is encrypted using the <code>tde_heap</code> access method or not.</p> <p>To verify a table encryption, run the following statement:</p> <pre><code>SELECT pg_tde_is_encrypted('table_name');\n</code></pre> <p>You can also verify if the table in a custom schema is encrypted. Pass teh schema name for the function as follows:</p> <pre><code>SELECT pg_tde_is_encrypted('schema.table_name');\n</code></pre> <p></p>"},{"location":"functions.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#considerations","title":"Considerations","text":"<p>You can use the following options to manage encryption keys:</p> <ul> <li> <p>Use the HashiCorp Vault server. This is the recommended approach. The Vault server configuration is out of scope of this document. We assume that you have the Vault server up and running. For the  <code>pg_tde</code> configuration, you need the following information:</p> <ul> <li>The secret access token to the Vault server</li> <li>The URL to access the Vault server</li> <li>(Optional) The CA file used for SSL verification</li> </ul> </li> <li> <p>Use the local keyfile. This approach is rather used for development and testing purposes since the keys are stored unencrypted in the specified keyfile.</p> </li> </ul>"},{"location":"install.html#procedure","title":"Procedure","text":"<p>Install <code>pg_tde</code> using one of available installation methods:</p> Package managerBuild from sourceRun in Docker <p>The packages are available for the following operating systems:</p> <ul> <li>Red Hat Enterprise Linux 8 and compatible derivatives</li> <li>Red Hat Enterprise Linux 9 and compatible derivatives</li> <li>Ubuntu 20.04 (Focal Fossa)</li> <li>Ubuntu 22.04 (Jammy Jellyfish)</li> <li>Ubuntu 24.04 (Noble Numbat)</li> <li>Debian 11 (Bullseye) </li> <li>Debian 12 (Bookworm)</li> </ul> <p>Install on Debian or Ubuntu Install on RHEL or derivatives</p> <p>To build <code>pg_tde</code> from source code, do the following</p> <ol> <li> <p>On Ubuntu/Debian: Install the following dependencies required for the build:</p> <pre><code>sudo apt install make gcc postgresql-server-dev-17 libcurl4-openssl-dev\n</code></pre> </li> <li> <p>Install Percona Distribution for PostgreSQL 17 or upstream PostgreSQL 17</p> </li> <li> <p>If PostgreSQL is installed in a non standard directory, set the <code>PG_CONFIG</code> environment variable to point to the <code>pg_config</code> executable.</p> </li> <li> <p>Clone the repository:  </p> <pre><code>git clone git://github.com/percona/pg_tde\n</code></pre> </li> <li> <p>Compile and install the extension</p> <pre><code>cd pg_tde\nmake USE_PGXS=1\nsudo make USE_PGXS=1 install\n</code></pre> </li> </ol> <p>Note</p> <p>The steps below are for the <code>pg_tde</code> community version. </p> <p>You can find Docker images built from the current main branch on Docker Hub. Images are built on top of postgres:17 official image.     </p> <p>To run <code>pg_tde</code> in Docker, use the following command:    </p> <pre><code>docker run --name pg-tde -e POSTGRES_PASSWORD=mysecretpassword -d perconalab/pg_tde\n</code></pre> <p>It builds and adds <code>pg_tde</code> extension to PostgreSQL 17. The <code>postgresql.conf</code> contains the required modifications. The <code>pg_tde</code> extension is added to <code>template1</code> so that all new databases automatically have the <code>pg_tde</code> extension loaded. </p> <p>Keys are not created automatically. You must configure a key provider and a principal key for each database  where you wish to use encrypted tables. See the instructions in the Setup section, starting with the 4<sup>th</sup> point, as the first 3 steps are already completed in the Docker image.</p> <p>See Docker Docs on usage.    </p> <p>You can also build a Docker image manually with:    </p> <pre><code>docker build . -f ./docker/Dockerfile -t your-image-name\n</code></pre>"},{"location":"install.html#next-steps","title":"Next steps","text":"<p>Setup</p> <p></p>"},{"location":"install.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"setup.html","title":"Set up <code>pg_tde</code>","text":""},{"location":"setup.html#enable-extension","title":"Enable extension","text":"<p>Load the <code>pg_tde</code> at the start time. The extension requires additional shared memory; therefore,  add the <code>pg_tde</code> value for the <code>shared_preload_libraries</code> parameter and restart the <code>postgresql</code> instance.</p> <ol> <li> <p>Use the ALTER SYSTEM command from <code>psql</code> terminal to modify the <code>shared_preload_libraries</code> parameter. This requires superuser privileges. </p> <pre><code>ALTER SYSTEM SET shared_preload_libraries = 'pg_tde';\n</code></pre> </li> <li> <p>Start or restart the <code>postgresql</code> instance to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgresql.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgresql-17\n</code></pre> </li> <li> <p>Create the extension using the CREATE EXTENSION command. You must have the privileges of a superuser or a database owner to use this command. Connect to <code>psql</code> as a superuser for a database and run the following command:</p> <pre><code>CREATE EXTENSION pg_tde;\n</code></pre> <p>By default, the <code>pg_tde</code> extension is created for the currently used database. To enable data encryption in other databases, you must explicitly run the <code>CREATE EXTENSION</code> command against them. </p> <p>Tip</p> <p>You can have the <code>pg_tde</code> extension automatically enabled for every newly created database. Modify the template <code>template1</code> database as follows: </p> <pre><code>psql -d template1 -c 'CREATE EXTENSION pg_tde;'\n</code></pre> </li> </ol>"},{"location":"setup.html#key-provider-configuration","title":"Key provider configuration","text":"<ol> <li> <p>Set up a key provider for the database where you have enabled the extension.</p> With KMIP serverWith HashiCorp VaultWith a keyring file <p>Make sure you have obtained the root certificate for the KMIP server and the keypair for the client. The client key needs permissions to create / read keys on the server. Find the configuration guidelines for the HashiCorp Vault Enterprise KMIP Secrets Engine.</p> <p>For testing purposes, you can use the PyKMIP server which enables you to set up required certificates. To use a real KMIP server, make sure to obtain the valid certificates issued by the key management appliance. </p> <pre><code>SELECT pg_tde_add_key_provider_kmip('provider-name','kmip-IP', 5696, '/path_to/server_certificate.pem', '/path_to/client_key.pem');\n</code></pre> <p>where:</p> <ul> <li><code>provider-name</code> is the name of the provider. You can specify any name, it\u2019s for you to identify the provider.</li> <li><code>kmip-IP</code> is the IP address of a domain name of the KMIP server</li> <li><code>port</code> is the port to communicate with the KMIP server. Typically used port is 5696.</li> <li><code>server-certificate</code> is the path to the certificate file for the KMIP server.</li> <li><code>client key</code> is the path to the client key.</li> </ul> <p> Warning: This example is for testing purposes only:</p> <p>The Vault server setup is out of scope of this document.</p> <pre><code>SELECT pg_tde_add_key_provider_kmip('kmip','127.0.0.1', 5696, '/tmp/server_certificate.pem', '/tmp/client_key_jane_doe.pem');\n</code></pre> <p>The Vault server setup is out of scope of this document.</p> <pre><code>SELECT pg_tde_add_key_provider_vault_v2('provider-name','root_token','url','mount','ca_path');\n</code></pre> <p>where: </p> <ul> <li><code>url</code> is the URL of the Vault server</li> <li><code>mount</code> is the mount point where the keyring should store the keys</li> <li><code>root_token</code> is an access token with read and write access to the above mount point</li> <li>[optional] <code>ca_path</code> is the path of the CA file used for SSL verification</li> </ul> <p> Warning: This example is for testing purposes only:</p> <pre><code>SELECT pg_tde_add_key_provider_file_vault_v2('my-vault','https://vault.example.com','secret/data','hvs.zPuyktykA...example...ewUEnIRVaKoBzs2', NULL);\n</code></pre> <p>This setup is intended for development and stores the keys unencrypted in the specified data file.    </p> <pre><code>SELECT pg_tde_add_key_provider_file('provider-name','/path/to/the/keyring/data.file');\n</code></pre> <p> Warning: This example is for testing purposes only:</p> <pre><code>SELECT pg_tde_add_key_provider_file('file-keyring','/tmp/pg_tde_test_local_keyring.per');\n</code></pre> </li> <li> <p>Add a principal key</p> <pre><code>SELECT pg_tde_set_principal_key('name-of-the-principal-key', 'provider-name');\n</code></pre> <p> Warning: This example is for testing purposes only:</p> <pre><code>SELECT pg_tde_set_principal_key('test-db-master-key','file-vault');\n</code></pre> <p>The key is auto-generated.</p> </li> </ol> <p> Info: The key provider configuration is stored in the database catalog in an unencrypted table. See how to use external reference to parameters to add an extra security layer to your setup.</p>"},{"location":"setup.html#wal-encryption-configuration","title":"WAL encryption configuration","text":"<p>After you enabled <code>pg_tde</code> and started the Percona Server for PostgreSQL, a principal key and a keyring for WAL are created. Now you need to instruct <code>pg_tde</code> to encrypt WAL files by configuring WAL encryption. </p> <p>Here\u2019s how to do it:</p> <ol> <li> <p>Enable WAL level encryption using the <code>ALTER SYSTEM SET</code> command. You need the privileges of the superuser to run this command:</p> <pre><code>ALTER SYSTEM set pg_tde.wal_encrypt = on;\n</code></pre> </li> <li> <p>Restart the server to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgresql.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgresql-17\n</code></pre> </li> <li> <p>We highly recommend you to create your own keyring and rotate the principal key. This is because the default principal key is created from the local keyfile and is stored unencrypted. </p> <p>Set up the key provider for WAL encryption</p> With HashiCorp VaultWith keyring file <pre><code>SELECT pg_tde_add_key_provider_vault_v2('PG_TDE_GLOBAL','provider-name',:'secret_token','url','mount','ca_path');\n</code></pre> <p>where: </p> <ul> <li><code>PG_TDE_GLOBAL</code> is the constant that defines the WAL encryption key  </li> <li><code>provider-name</code> is the name you define for the key provider</li> <li><code>url</code> is the URL of the Vault server</li> <li><code>mount</code> is the mount point where the keyring should store the keys</li> <li><code>secret_token</code> is an access token with read and write access to the above mount point</li> <li>[optional] <code>ca_path</code> is the path of the CA file used for SSL verification</li> </ul> <p>This setup is intended for development and stores the keys unencrypted in the specified data file.    </p> <pre><code>SELECT pg_tde_add_key_provider_file('provider-name','/path/to/the/keyring/data.file');\n</code></pre> </li> <li> <p>Rotate the principal key. Don\u2019t forget to specify the <code>PG_TDE_GLOBAL</code> constant to rotate only the principal key for WAL.</p> <pre><code>SELECT pg_tde_rotate_principal_key('PG_TDE_GLOBAL', 'new-principal-key', 'provider-name');\n</code></pre> </li> </ol> <p>Now all WAL files are encrypted for both encrypted and unencrypted tables.</p>"},{"location":"setup.html#next-steps","title":"Next steps","text":"<p>Test TDE</p> <p></p>"},{"location":"setup.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"switch.html","title":"Switch from Percona Server for PostgreSQL to PostgreSQL Community","text":"<p>Percona Server for PostgreSQL and PostgreSQL Community are binary compatible and enable you to switch from one to another. Here\u2019s how:</p> <ol> <li>If you used the <code>tde_heap</code> (tech preview feature) access method for encryption, either re-encrypt the data using the <code>tde_heap_basic</code> access method, or decrypt it completely </li> </ol> <p></p>"},{"location":"switch.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"table-access-method.html","title":"Table access method","text":"<p>A table access method is the way how PostgreSQL stores the data in a table. The default table access method is <code>heap</code>. PostgreSQL organizes data in a heap structure, meaning there is no particular order to the rows in the table. Each row is stored independently and identified by its unique row identifier (TID).</p>"},{"location":"table-access-method.html#how-the-heap-access-method-works","title":"How the <code>heap</code> access method works","text":"<p>Insertion: When a new row is inserted, PostgreSQL finds a free space in the tablespace and stores the row there.</p> <p>Deletion: When a row is deleted, PostgreSQL marks the space occupied by the row as free, but the data remains until it is overwritten by a new insertion.</p> <p>Updates: PostgreSQL handles updates by deleting the old row and inserting a new row with the updated values.</p>"},{"location":"table-access-method.html#custom-access-method","title":"Custom access method","text":"<p>Custom access methods allow you to implement and define your own way of organizing data in PostgreSQL. This is useful if the default table access method doesn\u2019t meet your needs.</p> <p>Custom access methods are typically available with PostgreSQL extensions. When you install an extension and enable it in PostgreSQL, a custom access method is created.</p> <p>An example of such an approach is the <code>tde_heap</code> access method. It is automatically created only for the databases where you enabled the <code>pg_tde</code> extension and configured the key provider, enabling you to encrypt the data.</p> <p>To use a custom access method, specify the <code>USING</code> clause for the <code>CREATE TABLE</code> command:</p> <pre><code>CREATE TABLE table_name (\n    column1 data_type,\n    column2 data_type,\n    ...\n) USING tde_heap;\n</code></pre>"},{"location":"table-access-method.html#how-tde_heap-works","title":"How <code>tde_heap</code> works","text":"<p>The <code>tde_heap</code> access method works on top of the default <code>heap</code> access method and is a marker to point which tables require encryption. It uses the custom storage manager TDE SMGR, which becomes active only after you installed the <code>pg_tde</code> extension. </p> <p>Every data modification operation is first sent to the Buffer Manager, which updates the buffer cache. Then, it is passed to the storage manager, which then writes it to disk. When a table requires encryption, the data is sent to the TDE storage manager, where it is encrypted before written to disk. </p> <p>Similarly, when a client queries the database, the PostgreSQL core sends the request to the Buffer Manager which checks if the requested data is already in the buffer cache. If it\u2019s not there, the Buffer Manager requests the data from the storage manager. The TDE storage manager  reads the encrypted data from disk, decrypts it and loads it to the buffer cache. The Buffer Manager sends the requested data to the PostgreSQL core and then to the client. </p> <p>Thus, the encryption is done at the storage manager level. </p>"},{"location":"table-access-method.html#changing-the-default-table-access-method","title":"Changing the default table access method","text":"<p>You can change the default table access method so that every table in the entire database cluster is created using the custom access method. For example, you can enable data encryption by default by defining the <code>tde_heap</code> as the default table access method. </p> <p>However, consider the following before making this change:</p> <ul> <li>This is a global setting and applies across the entire database cluster and not just a single database.  We recommend setting it with caution because all tables and materialized views created without an explicit access method in their <code>CREATE</code> statement will default to the specified table access method. </li> <li>You must create the <code>pg_tde</code> extension and configure the key provider for all databases before you modify the configuration. Otherwise PostgreSQL won\u2019t find the specified access method and will throw an error.</li> </ul> <p>Here\u2019s how you can set the new default table access method:</p> <ol> <li> <p>Add the access method to the <code>default_table_access_method</code> parameter.        </p> via the SQL statementvia the configuration filevia the SET command <p>Use the <code>ALTER SYSTEM SET</code> command. This requires superuser or ALTER SYSTEM privileges.</p> <p>This example shows how to set the <code>tde_heap</code> access method. Replace it with the <code>tde_heap_basic</code> if needed. </p> <pre><code>ALTER SYSTEM SET default_table_access_method=tde_heap;\n</code></pre> <p>Edit the <code>postgresql.conf</code> configuration file and add the value for the <code>default_table_access_method</code> parameter.</p> <p>This example shows how to set the <code>tde_heap</code> access method. Replace it with the <code>tde_heap_basic</code> if needed.</p> <pre><code>default_table_access_method = 'tde_heap'\n</code></pre> <p>You can use the SET command to change the default table access method temporarily, for the current session. </p> <p>Unlike modifying the <code>postgresql.conf</code> file or using the ALTER SYSTEM SET command, the changes you make via the SET command don\u2019t persist after the session ends.</p> <p>You also don\u2019t need to have the superuser privileges to run the SET command.</p> <p>You can run the SET command anytime during the session. This example shows how to set the <code>tde_heap</code> access method. Replace it with the <code>tde_heap_basic</code> if needed.</p> <pre><code>SET default_table_access_method = tde_heap;\n</code></pre> </li> <li> <p>Reload the configuration to apply the changes:</p> <pre><code>SELECT pg_reload_conf();\n</code></pre> </li> </ol> <p></p>"},{"location":"table-access-method.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"tde.html","title":"What is Transparent Data Encryption (TDE)","text":"<p>Transparent Data Encryption is a technology to protect data at rest. The encryption process happens transparently in the background, without affecting database operations. Data is automatically encrypted as it\u2019s written to the disk and decrypted as it\u2019s read, all in real-time. Users and applications interact with the data as usual without noticing any difference.</p>"},{"location":"tde.html#how-does-it-work","title":"How does it work?","text":"<p>To encrypt the data, two types of keys are used:</p> <ul> <li>Internal encryption keys to encrypt user data. They are stored internally, near the data that they encrypt.</li> <li>The principal key to encrypt database keys. It is kept separately from the database keys and is managed externally in the key management store. </li> </ul> <p>You have the following options to store and manage principal keys externally:</p> <ul> <li>Use the HashiCorp Vault server. Only the back end KV Secrets Engine - Version 2 (API) is supported.</li> <li>Use the KMIP-compatible server. <code>pg_tde</code> has been tested with the PyKMIP server and the HashiCorp Vault Enterprise KMIP Secrets Engine.</li> </ul> <p>The encryption process is the following:</p> <p></p> <p>When a user creates an encrypted table using <code>pg_tde</code>, a new random key is generated for that table using the AES128 (AES-ECB) cipher algorithm. This key is used to encrypt all data the user inserts in that table. Eventually the encrypted data gets stored in the underlying storage. </p> <p>The table itself is encrypted using the principal key. The principal key is stored externally in the key management store. </p> <p>Similarly when the user queries the encrypted table, the principal key is retrieved from the key store to decrypt the table. Then the same unique internal key for that table is used to decrypt the data, and unencrypted data gets returned to the user. So, effectively, every TDE table has a unique key, and each table key is encrypted using the principal key.</p>"},{"location":"tde.html#why-do-you-need-tde","title":"Why do you need TDE?","text":"<p>Using TDE has the following benefits:</p> <ul> <li> <p>For organizations:</p> <ul> <li>Ensure data safety when it is stored on disk and in backups</li> <li>Comply with security and legal standards like HIPAA, PCI DSS, SOC 2, ISO 27001</li> </ul> </li> <li> <p>For DBAs:</p> <ul> <li>Granular encryption of specific tables and reducing the performance overhead that encryption brings</li> <li>Additional layer of security to existing security measures like storage-level encryption, data encryption in transit using TLS, access control and more.</li> </ul> </li> </ul> <p>See also</p> <p>Percona Blog: Transparent Data Encryption (TDE)</p> <p></p>"},{"location":"tde.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"test.html","title":"Test Transparent Data Encryption","text":"<p>Enabling <code>pg_tde</code> extension for a database creates the table access method <code>tde_heap</code> . This access method enables you to encrypt the data.</p> <p>Here\u2019s how to do it:</p> <ol> <li> <p>Create a table in the database for which you have enabled <code>pg_tde</code> using the <code>tde_heap</code> access method as follows:</p> <pre><code>CREATE TABLE &lt;table_name&gt; (&lt;field&gt; &lt;datatype&gt;) USING tde_heap;\n</code></pre> <p> Warning: Example for testing purposes only:</p> <pre><code>CREATE TABLE albums (\nalbum_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\nartist_id INTEGER,\ntitle TEXT NOT NULL,\nreleased DATE NOT NULL\n) USING tde_heap;\n</code></pre> <p>Learn more about table access methods and how you can enable data encryption by default in the Table access methods section.</p> </li> <li> <p>To check if the data is encrypted, run the following function:</p> <pre><code>SELECT pg_tde_is_encrypted('table_name');\n</code></pre> <p>The function returns <code>t</code> if the table is encrypted and <code>f</code> - if not.</p> </li> <li> <p>Rotate the principal key when needed:</p> <pre><code>SELECT pg_tde_rotate_principal_key(); -- uses automatic key versionin\n-- or\nSELECT pg_tde_rotate_principal_key('new-principal-key', NULL); -- specify new key name\n-- or\nSELECT pg_tde_rotate_principal_key('new-principal-key', 'new-provider'); -- changeprovider\n</code></pre> </li> <li> <p>You can encrypt an existing table. It requires rewriting the table, so for large tables, it might take a considerable amount of time.</p> <pre><code>ALTER TABLE table_name SET access method  tde_heap;\n</code></pre> </li> </ol> <p>Hint</p> <p>If you no longer wish to use <code>pg_tde</code> or wish to switch to using the <code>tde_heap_basic</code> access method, see how you can decrypt your data.</p> <p></p>"},{"location":"test.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"uninstall.html","title":"Uninstall <code>pg_tde</code>","text":"<p>If you no longer wish to use TDE in your deployment, you can remove the <code>pg_tde</code> extension. To do that, your user must have the privileges of the superuser or a database owner.</p> <p>Here\u2019s how to do it:</p> <ol> <li>Drop the extension using the <code>DROP EXTENSION</code> with <code>CASCADE</code> command.</li> </ol> <p> Warning: The use of the CASCADE parameter deletes all tables that were created in the database with <code>pg_tde</code> enabled and also all dependencies upon the encrypted table (e.g. foreign keys in a non-encrypted table used in the encrypted one).</p> <pre><code>DROP EXTENSION pg_tde CASCADE\n</code></pre> <ol> <li> <p>Run the <code>DROP EXTENSION</code> command against every database where you have enabled the <code>pg_tde</code> extension</p> </li> <li> <p>Modify the <code>shared_preload_libraries</code> and remove the \u2018pg_tde\u2019 from it. Use the <code>ALTER SYSTEM SET</code> command for this purpose</p> </li> <li> <p>Start or restart the <code>postgre</code> instance to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgre.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgre-17\n</code></pre> </li> </ol> <p></p>"},{"location":"uninstall.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"yum.html","title":"Install <code>pg_tde</code> on Red Hat Enterprise Linux and derivatives","text":"<p>The packages for the tech preview <code>pg_tde</code> are available in the experimental repository for Percona Distribution for PostgreSQL 17. </p> <p>Check the list of supported platforms.</p> <p>This tutorial shows how to install <code>pg_tde</code> with Percona Distribution for PostgreSQL.</p>"},{"location":"yum.html#preconditions","title":"Preconditions","text":""},{"location":"yum.html#enable-disable-modules","title":"Enable / disable modules","text":"<p>For RHEL8/Oracle Linux 8/Rocky Linux 8, disable the <code>postgresql</code>  and <code>llvm-toolset</code>modules:    </p> <pre><code>sudo dnf module disable postgresql llvm-toolset\n</code></pre>"},{"location":"yum.html#install-percona-release","title":"Install <code>percona-release</code>","text":"<p>You need the <code>percona-release</code> repository management tool that enables the desired Percona repository for you.</p> <ol> <li> <p>Install <code>percona-release</code>:</p> <pre><code>sudo yum -y install https://repo.percona.com/yum/percona-release-latest.noarch.rpm \n</code></pre> </li> <li> <p>Enable the repository</p> <pre><code>sudo percona-release enable-only ppg-17.0 experimental\n</code></pre> </li> <li> </li> </ol> <p>You need to install the <code>percona-postgresql{{ pgversion }}-devel</code> package when working with pg_tde. This package requires dependencies that are not part of the Distribution, but can be installed from the specific repositories:</p> <pre><code>```\n$ sudo dnf config-manager --set-enabled ol9_codeready_builder\n```\n</code></pre>"},{"location":"yum.html#for-percona-postgresql-pgversion-devel-package","title":"For <code>percona-postgresql{{ pgversion }}-devel</code> package","text":""},{"location":"yum.html#install-pg_tde","title":"Install <code>pg_tde</code>","text":"<ol> <li> <p>Install Percona Distribution for PostgreSQL 17 and the required packages, run the following command:</p> <pre><code>sudo yum -y install percona-postgresql-client-common percona-postgresql-common percona-postgresql-server-dev-all percona-postgresql17 percona-postgresql17-contrib percona-postgresql17-devel percona-postgresql17-libs\n</code></pre> </li> <li> <p>Install <code>pg_tde</code> packages</p> <pre><code>sudo yum install percona-pg_tde_17\n</code></pre> </li> </ol>"},{"location":"yum.html#next-steps","title":"Next steps","text":"<p>Setup</p> <p></p>"},{"location":"yum.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"},{"location":"release-notes/release-notes.html","title":"pg_tde release notes","text":"<p><code>pg_tde</code> extension brings in Transparent Data Encryption (TDE) to PostgreSQL and enables you to keep sensitive data safe and secure.</p> <p>Get started</p>"},{"location":"release-notes/release-notes.html#beta-2024-06-30","title":"Beta (2024-06-30)","text":"<p>With this version, the access method for <code>pg_tde</code> extension is renamed <code>tde_heap_basic</code>. Use this access method name to create tables. Find guidelines in Test TDE tutorial.</p> <p>The Beta version introduces the following bug fixes and improvements:</p> <ul> <li> <p>Fixed the issue with <code>pg_tde</code> running out of memory used for decrypted tuples. The fix introduces the new component <code>TDEBufferHeapTupleTableSlot</code> that keeps track of the allocated memory for decrypted tuples and frees this memory when the tuple slot is no longer needed.</p> </li> <li> <p>Fixed the issue with adjusting a current position in a file by using raw file descriptor for the <code>lseek</code> function. (Thanks to user rainhard for providing the fix)</p> </li> <li> <p>Enhanced the init script to consider a custom superuser for the POSTGRES_USER parameter when <code>pg_tde</code> is running via Docker (Thanks to Alejandro Paredero for reporting the issue)</p> </li> </ul>"},{"location":"release-notes/release-notes.html#alpha-1-2024-03-28","title":"Alpha 1 (2024-03-28)","text":""},{"location":"release-notes/release-notes.html#release-highlights","title":"Release Highlights","text":"<p>The Alpha1 version of the extension introduces the following key features:</p> <ul> <li> <p>You can now rotate principal keys used for data encryption. This reduces the risk of long-term exposure to potential attacks and helps you comply with security standards such as GDPR, HIPAA, and PCI DSS.</p> </li> <li> <p>You can now configure encryption differently for each database. For example, encrypt specific tables in some databases with different encryption keys while keeping others non-encrypted.</p> </li> <li> <p>Keyring configuration has undergone several improvements, namely:</p> <ul> <li>You can define separate keyring configuration for each database</li> <li>You can change keyring configuration dynamically, without having to restart the server</li> <li>The keyring configuration is now stored in a catalog separately for each database, instead of a configuration file</li> <li>Avoid storing secrets in the unencrypted catalog by configuring keyring parameters to be read from external sources (file, http(s) request)</li> </ul> </li> </ul>"},{"location":"release-notes/release-notes.html#improvements","title":"Improvements","text":"<ul> <li>Renamed the repository and Docker image from <code>postgres-tde-ext</code> to <code>pg_tde</code>. The extension name remains unchanged</li> <li>Changed the Initialization Vector (IV) calculation of both the data and internal keys</li> </ul>"},{"location":"release-notes/release-notes.html#bugs-fixed","title":"Bugs fixed","text":"<ul> <li>Fixed toast related crashes</li> <li>Fixed a crash with the DELETE statement </li> <li>Fixed performance-related issues</li> <li>Fixed a bug where <code>pg_tde</code> sent many 404 requests to the Vault server</li> <li>Fixed \u0441ompatibility issues with old OpenSSL versions</li> <li>Fixed \u0441ompatibility with old Curl versions </li> </ul>"},{"location":"release-notes/release-notes.html#mvp-2023-12-12","title":"MVP (2023-12-12)","text":"<p>The Minimum Viable Product (MVP) version introduces the following functionality:</p> <ul> <li>Encryption of heap tables, including TOAST</li> <li>Encryption keys are stored either in Hashicorp Vault server or in local keyring file (for development) </li> <li>The key storage is configurable via separate JSON configuration files</li> <li>Replication support</li> </ul> <p></p>"},{"location":"release-notes/release-notes.html#get-expert-help","title":"Get expert help","text":"<p>If you need assistance, visit the community forum for comprehensive and free database knowledge, or contact our Percona Database Experts for professional support and services.</p> <p> Community Forum  Get a Percona Expert</p> <p></p>"}]}